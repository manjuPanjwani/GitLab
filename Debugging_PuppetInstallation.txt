#Puppet rules
#The Puppet rules are present in the init file. The purpose of this script is to append /java/bin to the environment variable $PATH, so that scripts in that directory can be executed without writing the full path.
#The purpose of this rule is to append /java/bin to the environment variable $PATH so that scripts in that directory can be executed without writing the full path.

#Issue detection 
echo $PATH

#The main directories used for executing binaries in Linux (/bin and /usr/bin) are missing.
#To get back to a working environment, run the following command:

export PATH=/bin:/usr/bin

#Let's look at the rule responsible for this breakage. It's located in the profile module of Puppet's production environment.
#To look at it, go to the manifests/ directory that contains the Puppet rules by using the following command:

cd /etc/puppet/code/environments/production/modules/profile/manifests
cat init.pp

#This rule is creating a script under /etc/profile.d/.Scripts in this path will perform startup tasks,including setting up a user's own environment variables.The files under /etc/profile.d/ should only be editable by root.
#We see that the file resource is part of the profile class.The general rules for creating a Puppet class definition used here are:
#The class definition starts with the "class" keyword, followed by the name of the class. In this case, "profile".
#The contents of the class are defined between curly braces and generally contain at least one resource declaration. In this case, a "file" resource.
#There could be other resources in this class, but for now it has only one file resource. Let's look at what it's doing. The file defined by this resource is '/etc/profile.d/append-path.sh', and the Puppet rule is using some of the available "file" attributes:
#It sets both the owner and group of the file to "root".
#It then sets the "mode" of the file to "0646". This number represents the permissions the file will have.
#In this example, we are using 4 numbers.The first one represents any special permissions that the file has (no special permissions). The second one is the permissions for the owner, (read and write), and then come the permissions for the group (read), and finally the permissions for the others (read and write)
#Finally, it sets the actual contents of the file. Here, the content is being set to"PATH=/java/bin\n".

#Fixing the problem
#This is an environment variable that contains an ordered list of paths that Linux will search for executables when running a command.
#Using these paths implies that we don't have to specify the absolute path for each command we want to run.

#The PATH variable typically contains a few different paths, which are separated by colons. The goal of the Puppet rule was to add one specific directory to the list of paths, but unfortunately it's currently completely overwriting the contents. We need to change the Puppet rule to append the directory without overwriting the other paths in the variable.
#To do this, we'll first include the current contents of the PATH variable followed by a colon, and then append the new contents we want to add.

sudo nano init.pp
#"PATH=\$PATH:/java/bin\n" since we want to append /java/bin to the environment variable $PATH
#The extra backslash before the $ is necessary because Puppet also uses $ to indicate variables. But in this case, we want the dollar sign in the contents of the file.

#the files in the /etc/profile.d directory should only be editable by the root user. In other words, the mode should be 0644 not 0646.

#trigger a manual run of the Puppet agent by running the following command:

sudo puppet agent -v --test

echo $PATH
